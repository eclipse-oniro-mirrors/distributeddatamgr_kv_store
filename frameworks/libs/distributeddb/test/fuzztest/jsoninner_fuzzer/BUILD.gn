# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/features.gni")
import("//build/test.gni")

module_output_path = "kv_store/kv_store"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "../../../gaussdb_rd/include",
    "../../../gaussdb_rd/src/common/include",
    "../../../gaussdb_rd/src/executor/include",
    "../../../gaussdb_rd/src/executor/document",
    "../../../gaussdb_rd/src/oh_adapter/include",
    "../../../gaussdb_rd/src/oh_adapter/src",
    "../../../gaussdb_rd/src/interface/include",
  ]

  defines = [
    "SQLITE_ENABLE_SNAPSHOT",
    "SQLITE_HAS_CODEC",
    "SQLITE_ENABLE_JSON1",
    "USING_HILOG_LOGGER",
    "USE_SQLITE_SYMBOLS",
    "SQLITE_ENABLE_DROPTABLE_CALLBACK",
    "USE_DISTRIBUTEDDB_CLOUD",
  ]
}

###############################################################################
ohos_source_set("src_file") {
  testonly = true

  sources = [
    "../../../gaussdb_rd/src/common/src/collection_option.cpp",
    "../../../gaussdb_rd/src/common/src/db_config.cpp",
    "../../../gaussdb_rd/src/common/src/grd_api_manager.cpp",
    "../../../gaussdb_rd/src/common/src/json_common.cpp",
    "../../../gaussdb_rd/src/common/src/os_api.cpp",
    "../../../gaussdb_rd/src/common/src/rd_log_print.cpp",
    "../../../gaussdb_rd/src/executor/base/grd_db_api.cpp",
    "../../../gaussdb_rd/src/executor/base/grd_db_api_inner.cpp",
    "../../../gaussdb_rd/src/executor/document/check_common.cpp",
    "../../../gaussdb_rd/src/executor/document/grd_document_api.cpp",
    "../../../gaussdb_rd/src/executor/document/grd_document_api_inner.cpp",
    "../../../gaussdb_rd/src/executor/document/grd_resultset_api.cpp",
    "../../../gaussdb_rd/src/executor/document/grd_resultset_api_inner.cpp",
    "../../../gaussdb_rd/src/executor/kv/grd_kv_api.cpp",
    "../../../gaussdb_rd/src/executor/kv/grd_kv_api_inner.cpp",
    "../../../gaussdb_rd/src/interface/src/collection.cpp",
    "../../../gaussdb_rd/src/interface/src/doc_errno.cpp",
    "../../../gaussdb_rd/src/interface/src/document_key.cpp",
    "../../../gaussdb_rd/src/interface/src/document_store.cpp",
    "../../../gaussdb_rd/src/interface/src/document_store_manager.cpp",
    "../../../gaussdb_rd/src/interface/src/projection_tree.cpp",
    "../../../gaussdb_rd/src/interface/src/result_set.cpp",
    "../../../gaussdb_rd/src/interface/src/result_set_common.cpp",
    "../../../gaussdb_rd/src/oh_adapter/src/kv_store_manager.cpp",
    "../../../gaussdb_rd/src/oh_adapter/src/rd_json_object.cpp",
    "../../../gaussdb_rd/src/oh_adapter/src/rd_sqlite_utils.cpp",
    "../../../gaussdb_rd/src/oh_adapter/src/sqlite_store_executor_impl.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/sqlite:sqlite" ]

  configs += [ "//third_party/cJSON:cJSON_config" ]
  ldflags = [ "-Wl,--exclude-libs,ALL" ]
  deps += [ "//third_party/cJSON:cjson" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
  ]

  subsystem_name = "distributeddatamgr"
  part_name = "kv_store"
}

ohos_fuzztest("JsonInnerFuzzTest") {
  module_out_path = module_output_path
  fuzz_config_file = "../jsoninner_fuzzer"

  if (!defined(deps)) {
    deps = []
  }
  if (!defined(external_deps)) {
    external_deps = []
  }
  configs = [ ":module_private_config" ]
  deps += [
    ":src_file",
    "//third_party/sqlite:sqlite",
  ]
  configs += [ "//third_party/cJSON:cJSON_config" ]
  ldflags = [ "-Wl,--exclude-libs,ALL" ]
  deps += [
    "//third_party/cJSON:cjson",
    "//third_party/openssl:libcrypto_shared",
  ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
    "--coverage",
  ]

  ldflags += [ "--coverage" ]

  cflags_cc = [ "--coverage" ]

  sources = [ "jsoninner_fuzzer.cpp" ]
}

###############################################################################

group("fuzztest") {
  testonly = true
  deps = []
  deps += [
    # deps file
    ":JsonInnerFuzzTest",
  ]
}
###############################################################################
